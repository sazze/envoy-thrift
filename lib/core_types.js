//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
if (typeof thrift === 'undefined') {
  thrift = {};
}
if (typeof thrift.core === 'undefined') {
  thrift.core = {};
}
ttypes.ExceptionType = {
'UNKNOWN' : 0,
'GENERAL_ERROR' : 1,
'INVALID_ARGUMENT' : 2,
'NOT_FOUND' : 3,
'TEMPORARY_ERROR' : 4,
'INTERNAL_ERROR' : 5,
'NOT_AUTHORIZED' : 6
};
thrift.core.Exception = module.exports.Exception = function(args) {
  Thrift.TException.call(this, "thrift.core.Exception")
  this.name = "thrift.core.Exception"
  this.type = null;
  this.message = null;
  this.code = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
  }
};
Thrift.inherits(thrift.core.Exception, Thrift.TException);
thrift.core.Exception.prototype.name = 'Exception';
thrift.core.Exception.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.core.Exception.prototype.write = function(output) {
  output.writeStructBegin('Exception');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 3);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

